[[["ChangeSet", ["Renaming <_rel_resource> to <test>", [["ChangeContents", ["python/rope_refactor.py", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef test(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = test(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = test(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()"]]], 1751447445.460184]], ["ChangeSet", ["Extract method <_file_stuff>", [["ChangeContents", ["python/rope_refactor.py", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    rel_path = _file_stuff(abs_path, workspace)\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\ndef _file_stuff(abs_path, workspace):\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    return rel_path\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()"]]], 1751447460.313969]], ["ChangeSet", ["Renaming <_rel_resource> to <shmuli>", [["ChangeContents", ["python/rope_refactor.py", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef shmuli(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = shmuli(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = shmuli(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()"]]], 1751448267.0647922]], ["ChangeSet", ["Extract method <extracted_shmuli>", [["ChangeContents", ["python/rope_refactor.py", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    rel_path = extracted_shmuli(abs_path, workspace)\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\ndef extracted_shmuli(abs_path, workspace):\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    return rel_path\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()", "from __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\n\nfrom rope.base.project import Project\nfrom rope.refactor.rename import Rename\nfrom rope.refactor.extract import ExtractMethod\n\n\ndef _rel_resource(project: Project, workspace: Path, abs_path: str):\n    \"\"\"Return the Rope resource for *abs_path* inside *workspace*.\"\"\"\n    abs_file = Path(abs_path).resolve()\n    rel_path = abs_file.relative_to(workspace.resolve())\n    # get_resource returns File / Folder for a *relative* path\n    return project.get_resource(str(rel_path))\n\n\ndef _rename(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    offset: int = int(data[\"offset\"])\n    change = Rename(project, res, offset).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\ndef _extract_method(project: Project, ws: Path, data: dict[str, object]) -> None:\n    res = _rel_resource(project, ws, str(data[\"file\"]))\n    start: int = int(data[\"start\"])\n    end: int = int(data[\"end\"])\n    change = ExtractMethod(project, res, start, end).get_changes(str(data[\"newName\"]))\n    project.do(change)\n\n\nDISPATCH = {\n    \"rename\": _rename,\n    \"extract_method\": _extract_method,\n}\n\n\ndef main() -> None:\n    payload = json.loads(sys.argv[1])\n    workspace = Path(payload[\"workspace\"]).resolve()\n    proj = Project(str(workspace))\n    try:\n        DISPATCH[payload[\"action\"]](proj, workspace, payload)\n    finally:\n        proj.close()\n\n\nif __name__ == \"__main__\":\n    main()"]]], 1751448284.445855]]], []]